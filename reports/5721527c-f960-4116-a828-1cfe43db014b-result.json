{"name": "test_ct06", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <pages.page_editar_evento.editarEvento object at 0x000001EF826EE6D0>, nome = 'Evento teste ct07 Alt', descricao = 'Alterando evento', site = 'alterei.com.br', email_responsavel = 'alterado@teste.com'\ninicio_evento = '02/02/2021', fim_evento = '16/02/2021', inicio_inscricao = '02/01/2021', fim_inscricao = '01/02/2021', funcao1 = 'Professor Alterado', funcao2 = 'Gerente Alterado', funcao3 = 'Diretor Alterado'\nnome_responsavel = 'Raquel Alves da Silva'\n\n    def ct_06_editar_evento(self,nome, descricao, site, email_responsavel, inicio_evento, fim_evento, inicio_inscricao,\n                          fim_inscricao, funcao1, funcao2, funcao3, nome_responsavel):\n    \n        try:\n            sleep(1)\n            self.find_element(self.nome).clear()\n            self.find_element(self.nome).send_keys(nome)\n            self.find_element(self.descricao).clear()\n            self.find_element(self.descricao).send_keys(descricao)\n            self.find_element(self.site).clear()\n            self.find_element(self.site).send_keys(site)\n            self.find_element(self.email_responsavel).clear()\n            self.find_element(self.email_responsavel).send_keys(email_responsavel)\n    \n            # CERTIFICADO\n            self.preenche_certificado(funcao1, funcao2, funcao3)\n            # FIM CERTIFICADO\n    \n            # RESPONSAVEL\n>           self.preenche_responsavel(nome_responsavel) # DA ERRO DE JS AQUI\n\npages\\page_editar_evento.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.page_editar_evento.editarEvento object at 0x000001EF826EE6D0>, nome_responsavel = 'Raquel Alves da Silva'\n\n    def preenche_responsavel(self, nome_responsavel):\n        sleep(1)\n        self.find_element(self.btn_buscar).click()\n        sleep(1)\n        self.find_element(self.nome_responsavel).send_keys(nome_responsavel)\n        sleep(1)\n        self.find_element(self.btn_pesquisar_responsavel).click()\n        sleep(1)\n>       self.find_element(self.checkbox_responsavel).click()\n\npages\\page_editar_evento.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.page_editar_evento.editarEvento object at 0x000001EF826EE6D0>, locator = ('xpath', '/html/body/div[4]/div[2]/div[1]/div/div/div/div[1]/div[2]/table/tbody/tr[1]/td[1]/div/div[2]/table/tbody[2]/tr/td[1]/div/input')\n\n    def find_element(self, locator):\n>       return self.webdriver.find_element(*locator)\n\nutils\\config.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fda2c63d0bd712f582c05fc155bf99d4\")>, by = 'xpath'\nvalue = '/html/body/div[4]/div[2]/div[1]/div/div/div/div[1]/div[2]/table/tbody/tr[1]/td[1]/div/div[2]/table/tbody[2]/tr/td[1]/div/input'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        Find an element given a By strategy and locator. Prefer the find_element_by_* methods when\n        possible.\n    \n        :Usage:\n            element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\nC:\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fda2c63d0bd712f582c05fc155bf99d4\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': '/html/body/div[4]/div[2]/div[1]/div/div/div/div[1]/div[2]/table/tbody/tr[1]/td[1]/div/div[2]/table/tbody[2]/tr/td[1]/div/input'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EF826C8520>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Not unique in the new ID space: 1495\"},\"error\":\"unexpected alert o...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B88944+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B88914+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n>           raise exception_class(message, screen, stacktrace, alert_text)\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Not unique in the new ID space: 1495\nE           Message: unexpected alert open: {Alert text : Not unique in the new ID space: 1495}\nE             (Session info: chrome=86.0.4240.198)\n\nC:\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:241: UnexpectedAlertPresentException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_ct06():\n        editar_evento.caminho()\n>       editar_evento.ct_06_editar_evento(\n            nome='Evento teste ct07 Alt',\n            descricao='Alterando evento',\n            site='alterei.com.br',\n            email_responsavel='alterado@teste.com',\n            inicio_evento='02/02/2021',\n            fim_evento='16/02/2021',\n            inicio_inscricao='02/01/2021',\n            fim_inscricao='01/02/2021',\n            funcao1='Professor Alterado',\n            funcao2='Gerente Alterado',\n            funcao3='Diretor Alterado',\n            nome_responsavel='Raquel Alves da Silva')\n\ntests\\test_editar_evento.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.page_editar_evento.editarEvento object at 0x000001EF826EE6D0>, nome = 'Evento teste ct07 Alt', descricao = 'Alterando evento', site = 'alterei.com.br', email_responsavel = 'alterado@teste.com'\ninicio_evento = '02/02/2021', fim_evento = '16/02/2021', inicio_inscricao = '02/01/2021', fim_inscricao = '01/02/2021', funcao1 = 'Professor Alterado', funcao2 = 'Gerente Alterado', funcao3 = 'Diretor Alterado'\nnome_responsavel = 'Raquel Alves da Silva'\n\n    def ct_06_editar_evento(self,nome, descricao, site, email_responsavel, inicio_evento, fim_evento, inicio_inscricao,\n                          fim_inscricao, funcao1, funcao2, funcao3, nome_responsavel):\n    \n        try:\n            sleep(1)\n            self.find_element(self.nome).clear()\n            self.find_element(self.nome).send_keys(nome)\n            self.find_element(self.descricao).clear()\n            self.find_element(self.descricao).send_keys(descricao)\n            self.find_element(self.site).clear()\n            self.find_element(self.site).send_keys(site)\n            self.find_element(self.email_responsavel).clear()\n            self.find_element(self.email_responsavel).send_keys(email_responsavel)\n    \n            # CERTIFICADO\n            self.preenche_certificado(funcao1, funcao2, funcao3)\n            # FIM CERTIFICADO\n    \n            # RESPONSAVEL\n            self.preenche_responsavel(nome_responsavel) # DA ERRO DE JS AQUI\n            # FIM RESPONSAVEL\n    \n            self.find_element(self.inicio_evento).clear()\n            self.find_element(self.inicio_evento).send_keys(inicio_evento)\n            self.find_element(self.fim_evento).clear()\n            self.find_element(self.fim_evento).send_keys(fim_evento)\n            self.find_element(self.inicio_inscricao).clear()\n            self.find_element(self.inicio_inscricao).send_keys(inicio_inscricao)\n            self.find_element(self.fim_inscricao).clear()\n            self.find_element(self.fim_inscricao).send_keys(fim_inscricao)\n    \n            # TIPO DE EVENTO\n            self.find_element(self.btn_tipo_evento).click()\n            self.find_element(self.tipo_evento).click()\n            # FIM TIPO DE EVENTO\n    \n            self.find_element(self.inscricao_externa).click()\n            self.find_element(self.evento_pago_aluno).click()\n            self.find_element(self.evento_pago_externo).click()\n    \n            self.find_element(self.btn_enviar).click()\n            sleep(1)\n            msg = self.espera_mensagem()\n            if msg is True:\n                if self.find_element(self.alert_texto).text == 'Evento salvo com sucesso':\n                    print('\\n CT_06 sem erros: o evento foi editado com sucesso')\n                    assert True\n                else:\n                    print(\"\\n [!] CT_06 reportou erro: Não houve edição do evento\")\n                    assert False\n                self.find_element(self.btn_ok_alert).click()\n        except UnexpectedAlertPresentException as e:\n            print(\"\\n [!] CT_06 reportou erro: \" + str(e))\n>           assert False\nE           AssertionError\n\npages\\page_editar_evento.py:197: AssertionError"}, "start": 1606182442718, "stop": 1606182463408, "uuid": "017b33f6-afe8-4713-98e7-32f66acf7d66", "historyId": "5453cf41e9df65187021e573a725afff", "testCaseId": "4e26dd3e8628007b70a07f1c0019aea0", "fullName": "tests.test_editar_evento#test_ct06", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_editar_evento"}, {"name": "host", "value": "DESKTOP-NM8JMBK"}, {"name": "thread", "value": "7948-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_editar_evento"}]}