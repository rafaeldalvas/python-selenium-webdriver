{"name": "test_ct05", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "def test_ct05():\n        webdriver.get(url)\n        criar_evento.caminho()\n>       criar_evento.ct05_criar_evento(\n            nome               = 'Evento teste ct5',\n            descricao          = 'testando datas invalidas',\n            #Datas inferiores a data atual do sistema:\n            inicio_evento      = '03/12/2015',\n            fim_evento         = '10/01/2016',\n            inicio_inscricao   = '02/11/2015',\n            fim_inscricao      = '02/12/2015',\n        )\n\ntests\\test_criar_evento.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.page_criar_evento.criarEvento object at 0x0000020DAA3EB940>, nome = 'Evento teste ct5', descricao = 'testando datas invalidas', inicio_evento = '03/12/2015', fim_evento = '10/01/2016', inicio_inscricao = '02/11/2015'\nfim_inscricao = '02/12/2015'\n\n    def ct05_criar_evento(self, nome, descricao, inicio_evento, fim_evento, inicio_inscricao,\n                          fim_inscricao):\n        try:\n            sleep(1)\n            self.find_element(self.nome).send_keys(nome)\n            self.find_element(self.descricao).send_keys(descricao)\n            self.find_element(self.inicio_evento).clear()\n            self.find_element(self.inicio_evento).send_keys(inicio_evento)\n            self.find_element(self.fim_evento).clear()\n            self.find_element(self.fim_evento).send_keys(fim_evento)\n            self.find_element(self.inicio_inscricao).clear()\n            self.find_element(self.inicio_inscricao).send_keys(inicio_inscricao)\n            self.find_element(self.fim_inscricao).clear()\n            self.find_element(self.fim_inscricao).send_keys(fim_inscricao)\n            # TIPO DE EVENTO\n            self.find_element(self.btn_tipo_evento).click()\n            sleep(1)\n            self.find_element(self.tipo_evento).click()\n            # FIM TIPO DE EVENTO\n            self.find_element(self.btn_enviar).click()\n            sleep(1)\n            msg = self.espera_mensagem()\n            if msg is True:\n                if self.find_element(self.alert_texto).text.find('Evento salvo com sucesso') > -1:\n                    print('\\n [!] CT_05 reportou erro: Evento criado com datas invÃ¡lidas')\n>                   assert False\nE                   AssertionError\n\npages\\page_criar_evento.py:394: AssertionError"}, "start": 1606172802028, "stop": 1606172813936, "uuid": "4fa18765-2a02-43ab-acb9-20925c658635", "historyId": "ab217e8a24e8d30903da6a88720c2ed3", "testCaseId": "1e9426102dc7ea260a1ef13b18235654", "fullName": "tests.test_criar_evento#test_ct05", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_criar_evento"}, {"name": "host", "value": "DESKTOP-OFT3SDL"}, {"name": "thread", "value": "15952-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_criar_evento"}]}